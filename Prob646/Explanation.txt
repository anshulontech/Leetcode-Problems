METHOD 1:-

Time Complexity:-O(N*log(N)).
Space Complexity:-O(N).  -- Just for sorting.
     
Approach:-
    In this what we are going to do is that we will first sort the vector on the basis of their 2nd element and than taking 1st elemnt as root of the chain we will check that how many elements can be inserted using the property that for (a,b) and (c,d) b<c and if this property holdes true than we update (a,b) with (c,d) and search for (c,d) in the forward of the array and at last return the size of the new array formed. But we can do this lso without using constant extra space by taking count that how many elements are there in the array and taking last_val of the array formed .

METHOD 2:-

Time Complexity:-O(N^2).
Space Complexity:-O(N).

Approach:-
    In this what we are going to do us that first we will sort the array based on first index and than check for each index that how many previous elements can be used make longest chain till that element and store the max result obtained in a vector of array. After doing this what we can do is that we will calculate the max value in the dp array which represents that what will be the max value of chain that can be formed.